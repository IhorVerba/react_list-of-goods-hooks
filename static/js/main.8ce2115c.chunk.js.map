{"version":3,"sources":["Types/SortField.ts","App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","EMPTY","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","reverse","preparedGoods","sort","good1","good2","SORT_FIELD_LENGTH","length","SORT_FIELD_ALPHABET","localeCompare","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,2EAAAA,K,+BAAAA,E,2BAAAA,E,UAAAA,M,gBCMCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,OAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EAjCR,SACEC,EACAL,GAEC,IADDM,EACA,wDACMC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAAUgB,kBACb,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKjB,EAAUkB,oBACb,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAKXJ,GACFC,EAAcD,UAGTC,EAOcQ,CACnBnB,EACAI,EACAE,GAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcL,EAAUkB,sBAEtCM,QAAS,kBAAMlB,EAAaN,EAAUkB,sBALxC,iCAUA,wBACEI,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,IAAcL,EAAUgB,oBAEtCQ,QAAS,kBAAMlB,EAAaN,EAAUgB,oBALxC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAA6B,IAAjBhB,IAEdiB,QAAS,kBAAMhB,GAAiBD,IALlC,sBAUEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAzCjBlB,EAAaN,EAAUI,YACvBI,GAAgB,IAqCV,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC5GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8ce2115c.chunk.js","sourcesContent":["export enum SortField {\n  SORT_FIELD_ALPHABET = 'alphabet',\n  SORT_FIELD_LENGTH = 'length',\n  EMPTY = '',\n}\n","import cn from 'classnames';\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { SortField } from './Types/SortField';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortField,\n  reverse = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        case SortField.SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.EMPTY);\n  const [reverseField, setReverseField] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    reverseField,\n  );\n\n  const handleReset = () => {\n    setSortField(SortField.EMPTY);\n    setReverseField(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.SORT_FIELD_ALPHABET,\n          })}\n          onClick={() => setSortField(SortField.SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortField.SORT_FIELD_LENGTH,\n          })}\n          onClick={() => setSortField(SortField.SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': reverseField === false,\n          })}\n          onClick={() => setReverseField(!reverseField)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => handleReset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}